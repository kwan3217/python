"""
Generate an EESchema schematic for a charlieplex

"""
import math
import sys
import os.path
import datetime, time
# calculate the offset taking into account daylight saving time
utc_offset_sec = time.altzone if time.localtime().tm_isdst else time.timezone
utc_offset = datetime.timedelta(seconds=-utc_offset_sec)
datestr=datetime.datetime.now().replace(tzinfo=datetime.timezone(offset=utc_offset)).isoformat()
def name_diode(i,slot_ofs=0,ring_ofs=0,mod=60,ringdigits=1,slotdigits=2):
    """
    Name a diode
    :param i: Zero-based diode number
    :param ofs: Set to 0 if D000 is allowed, set to 1 if you want to start at d
    :param mod:
    :return:
    """
    ring=i//mod+ring_ofs
    slot=i%mod+slot_ofs
    ringspace=10**slotdigits
    return ("D%%0%dd"%(ringdigits+slotdigits))%(ring*ringspace+slot)

def map_diode(i,wires):
    return i

def name_wire(i,ofs=1,digits=2):
    return ("Q%%0%dd"%(digits))%(i+ofs)

bidi=False
Npair=120 #Number of diodes (or pairs) to place
wires=math.ceil((math.sqrt(1+8*Npair)+1)/2)

#Figure anode-kathode list
row_a=0
drow2=1
row_k=row_a+drow2
aks=[0]*Npair #Anode-kathode list
for i_pair in range(Npair):
    aks[i_pair]=(row_a,row_k)
    row_a+=1
    row_k=row_a+drow2
    if (row_k)>=wires:
        drow2+=1
        row_a=0
        row_k=row_a+drow2
print(aks)
#Place diodes
occupied=[[""]*(wires-1)]
placement={}
for i_pair,ak in enumerate(aks):
    found=False
    for i_col,col in enumerate(occupied):
        found=True
        for i_cell in range(ak[0],ak[1]):
            if col[i_cell]!="":
                found=False
                break
        if found:
            for i_cell in range(ak[0],ak[1]):
                col[i_cell]=name_diode(i_pair) if i_cell==ak[0] else "|"
            placement[ak]=i_col
            break
    if not found:
        col=[""]*(wires-1)
        for i_cell in range(ak[0], ak[1]):
            col[i_cell] = name_diode(i_pair) if i_cell == ak[0] else "|"
        placement[ak] = len(occupied)
        occupied.append(col)
for i_wire in range(wires-2,-1,-1):
    for col in occupied:
        print("%5s"%col[i_wire],end='')
    print()
#figure row wire lengths
wire_len=[0]*wires
for ak in aks:
    if wire_len[ak[0]]<placement[ak]:
        wire_len[ak[0]]=placement[ak]
    if wire_len[ak[1]]<placement[ak]:
        wire_len[ak[1]]=placement[ak]
print(wire_len)
with open("Charlieplex16.sch","w") as ouf:
    row0 = 600
    row1 = 100
    drow = -400
    row0 = row0 - wires * drow
    col0 = 1000
    col1 = 300
    dcol = 400
    print("EESchema Schematic File Version 4", file=ouf)
    print("LIBS:Precision Arduino Charlieplex 2.0-cache", file=ouf)
    print("EELAYER 26 0", file=ouf)
    print("EELAYER END", file=ouf)
    print("$Descr User %d %d"%(col0*2+col1+len(occupied)*dcol,row0+2000), file=ouf)
    print("encoding utf-8", file=ouf)
    print("Sheet 1 1", file=ouf)
    print('Title "Charlieplex with %d signals (%d pairs)"' % (wires, Npair), file=ouf)
    print('Date "%s"' % datestr, file=ouf)
    print('Rev ""', file=ouf)
    print('Comp ""', file=ouf)
    print('Comment1 "Generated by %s"' % os.path.basename(sys.argv[0]), file=ouf)
    print('Comment2 ""', file=ouf)
    print('Comment3 ""', file=ouf)
    print('Comment4 ""', file=ouf)
    print("$EndDescr", file=ouf)

    #Draw the row wires
    for i_wire in range(wires):
        #Row wire
        if i_wire==wires-1:
            ofs=-200
        else:
            ofs=0
        print("Wire Wire Line",file=ouf)
        print("        %d %d %d %d"%(col0,row0+i_wire*drow,col0+col1+wire_len[i_wire]*dcol,row0+i_wire*drow),file=ouf)
        print("Text HLabel %d  %d  0    50 UnSpc ~ 0"%(col0,row0+i_wire*drow),file=ouf)
        print(name_wire(i_wire),file=ouf)
    #Draw the components and their connections
    for i_pair,ak in enumerate(placement):
        xdevice=col0+col1+placement[ak]*dcol
        ydevice=row0+row1+ak[1]*drow+50
        ywire=row0+row1+ak[0]*drow-100
        print("Wire Wire Line",file=ouf)
        print("        %d %d %d %d" %(xdevice,ydevice-150,xdevice,ywire),file=ouf)
        #Bottom (cathode) connection
        print("Connection ~ %d %d "%(xdevice,ydevice+150),file=ouf)
        #Anode connection
        print("Connection ~ %d %d "%(xdevice,ydevice-150),file=ouf)
        #Top connection
        #This could be optimized - only the top device in a column needs this connection, the rest use the bottom
        #connection of the next higher device. The problem is figuring out if this is the top device.
        print("Connection ~ %d %d "%(xdevice,ywire),file=ouf)
                # Connection ~ 900  600
        print("$Comp",file=ouf)
        print("L Device:LED_Small %s"%name_diode(map_diode(i_pair,wires)),file=ouf)
        print("U 1 0 %08x"%(0xC247B3F4+i_pair),file=ouf)
        print("P %d %d"%(xdevice,ydevice),file=ouf)
        print('F 0 "%s" H %d %d 59  0000 L BNN'%(name_diode(map_diode(i_pair,wires)),xdevice-150,ydevice+50),file=ouf)
        print('F 1 "%s" V %d %d 59  0001 L BNN'%("HOUR" if i_pair<60 else "MIN",xdevice,ydevice),file=ouf)
        print('F 2 "KwanSystems:LED-0603" H %d %d 50  0001 C CNN'%(xdevice,ydevice),file=ouf)
        print('F 3 "" H %d %d 50  0001 C CNN'%(xdevice,ydevice-50),file=ouf)
        print("     1    %d %d"%(xdevice,ydevice),file=ouf)
        print("     0   1   -1   0",file=ouf)
        print("$EndComp",file=ouf)
    #            i_pair+=1

    print("$EndSCHEMATC",file=ouf)